<!-- A list of components -->
<!ELEMENT componentset (component+, manifest*)>

<!-- One component.  The ID attribute is a unique identifier for this
     component, used in, for example, <dependencies> elements of other
     components.  The ID should be the same as the package variable
     declared as the first argument of the configure.ac AC_INIT macro. -->
<!ELEMENT component     (version,
                         path, 
                         description,
                         abstract?, 
                         dependencies,
                         developers?,
                         documentation?,
                         bugreports?,
                         notes?)>
<!-- The component's id attribute is the name of this component, and
     should generally match the package name as declared in
     configure.ac.  The buildsupport attribute is "yes" if this component
     is configured and built during bootstrapping, or "noauto" if it
     should be optionally configured and built during bootstrapping;
     if so, it might need special handling in the top-level bootstrap
     file.  The status should be marked obsolete when appropriate, as
     this allows us to check if any component depends on an obsolete one.  -->
<!ATTLIST component
        id      	ID      #REQUIRED
	buildsupport	( yes | no | noauto )	"no"
	status		( current | obsolete )  "current"
        >

<!-- Version number of this component, which should be the same as the
     version declared in configure.ac AC_INIT -->
<!ELEMENT version       (#PCDATA)>

<!-- Brief description of this component -->
<!ELEMENT description   (#PCDATA)>

<!-- Optional longer description of the component's functionality -->
<!ELEMENT abstract     (p+)>

<!-- Path to this component in CVS tree, for example libraries/ast -->
<!ELEMENT path          (#PCDATA)>

<!-- Declare the dependencies of this component on others.  These are
     of four types.

     * Sourceset dependencies are those components which must be
     installed in order to build the complete set of sources, either
     for building or for distribution.  This includes documentation,
     so it would include star2html as well as messgen.

     * Build dependencies are those which are required in order
     to build this component.  This typically means include files, but
     if part of the component is an executable file (such as compifl
     within the parsecon component), then that's a build dependence
     also (but see the discussion of `option', below).  You may not
     have two components which have a build dependency on each other,
     since that would mean that each would have to be built before the
     other, which is impossible.

     * Link dependencies are those required to link against the
     libraries in a component.  That means all the libraries that this
     component's libraries use.  These are not necessarily build
     dependencies, since if you are building a library, any called
     libraries don't have to be present in order to build this
     library; you can have two components which have mutual link
     dependencies.  If you are building an application, however, then
     all its link dependencies will actually be build dependencies and
     should be declared as such.  In other words, the distinction
     between build and link dependencies is important only for library
     components.

     * Use dependencies are those which are required in order for the
     component to be used by something else, after it has been built
     and installed.  For example a library which called another
     application as part of its functionality would have only a use
     dependency on the component which contained that application.

     The point of this is that different dependencies are required at
     different times.  The set of dependencies in the master makefile
     is composed of all the `sourceset' and `build' dependencies, but
     not `link' or `use' dependencies, and since the core Starlink
     libraries are closely interdependent, the set of `build'
     dependencies needs to be kept as small as possible in order to
     avoid circularities.

     All these relationships are transitive: if A has a build
     dependency on B, and B has one on C, then A has a build
     dependency on C.  You can augment this by using the `option'
     attribute on the elements: if, in component A's <component>
     element you say <build option='link'>B</build>, then you declare
     that A has a build-time dependency on B, but that (presumably
     because you are building an application within a component which
     is mostly libraries) you need to link against B, so component A
     has a dependency on all of B's _link_ dependencies, not just its
     build dependencies.  This is (I believe) the only case where this
     `option' attribute is useful, though it is legal on all the
     elements within <dependencies>.

-->
<!ELEMENT dependencies  (sourceset | build | link | use | test | configure)*>
<!ELEMENT sourceset     (#PCDATA)>
<!ELEMENT build         (#PCDATA)>
<!ELEMENT link          (#PCDATA)>
<!ELEMENT use           (#PCDATA)>
<!ELEMENT test          (#PCDATA)>
<!ELEMENT configure     (#PCDATA)>
<!ATTLIST sourceset     option CDATA #IMPLIED>
<!ATTLIST build         option CDATA #IMPLIED>
<!ATTLIST link          option CDATA #IMPLIED>
<!ATTLIST use           option CDATA #IMPLIED>
<!ATTLIST test          option CDATA #IMPLIED>
<!ATTLIST configure     option CDATA #IMPLIED>

<!-- A list of developers with an interest in this component.  If the
     uname and email address are unknown, omit the corresponding element.  -->
<!ELEMENT developers    (person+)>
<!ELEMENT person        (name, uname?, email?, role?)>

<!-- A developer's name -->
<!ELEMENT name          (#PCDATA)>

<!-- A username on the repository machine, as appears in CVS commit
     messages and Id lines -->
<!ELEMENT uname         (#PCDATA)>

<!-- An email address -->
<!ELEMENT email         (#PCDATA)>

<!-- A role.  This isn't specified yet, but it might include strings
     like `owner' for the codeline owner, `noinform' to be omitted
     from mailings about commits, and so on. -->
<!ELEMENT role          (#PCDATA)>

<!-- A list of document numbers, such as sun123, which describe this
     component -->
<!ELEMENT documentation (#PCDATA)>

<!-- An email address where bug reports should be sent -->
<!ELEMENT bugreports    (#PCDATA)>

<!-- Any other notes -->
<!ELEMENT notes         (p+)>
<!ELEMENT p             (#PCDATA)>

<!-- The installation manifest for one component.  The component ID
     must be the ID attribute of a <component> element.  However it is
     not declared as an IDREF below, as the <manifest> element is
     sometimes used as a top-level document type. -->
<!ELEMENT manifest      (version, files)>
<!ATTLIST manifest
        component       CDATA   #REQUIRED
        >

<!-- The list of installed files.  A whitespace-separated list; in
     fact, the files should be separated by newlines, for easy
     subsequent processing, though this is unenforceable here. -->
<!ELEMENT files         (file)>
<!ELEMENT file         (#PCDATA)>

<!ATTLIST file
        mime-type       CDATA   #REQUIRED
        permissions     CDATA   #REQUIRED
        type            CDATA   #REQUIRED
        >
